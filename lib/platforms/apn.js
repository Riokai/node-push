// Generated by CoffeeScript 1.8.0
(function() {
  var ApplePushNotification, apns, applePN, exports;

  apns = require('apn');

  ApplePushNotification = (function() {
    var gateway, sandbox_gateway;

    sandbox_gateway = 'gateway.sandbox.push.apple.com';

    gateway = 'gateway.push.apple.com';

    ApplePushNotification.prototype.useSandbox = false;

    ApplePushNotification.prototype.expiry = 3600;

    ApplePushNotification.prototype.sound = 'ping.aiff';

    ApplePushNotification.prototype.slient = false;

    function ApplePushNotification() {
      this.key = 'cert.pem';
      this.cert = 'key.pem';
    }

    ApplePushNotification.prototype.configure = function(options) {
      var key, val;
      if (options == null) {
        options = {};
      }
      for (key in options) {
        val = options[key];
        this[key] = val;
      }
      return this;
    };

    ApplePushNotification.prototype.callback = function(err, notice) {
      if (err != null) {
        return console.error("APN-ERROR: " + err + ", content: " + (notice != null ? notice.compiledPayload : void 0));
      }
    };

    ApplePushNotification.prototype.send = function(data, callback) {
      var connection, myDevice, note;
      if (!(data != null ? data.deviceToken : void 0)) {
        throw new Error('device token is required');
      }
      connection = new apns.Connection({
        cert: this.cert,
        key: this.key,
        gateway: this.useSandbox ? sandbox_gateway : gateway,
        errorCallback: callback || this.callback
      });
      myDevice = new apns.Device(data.deviceToken);
      note = new apns.Notification();
      note.badge = data.badge;
      note.expiry = Math.floor(Date.now() / 1000) + this.expiry;
      if (data.hasOwnProperty('sound')) {
        note.sound = data.sound;
      } else {
        note.sound = this.sound;
      }
      note.alert = data.alert;
      if (data.extra) {
        note.payload = data.extra;
      }
      if (data.slient || this.slient) {
        note.sound = "";
        note['content-available'] = 1;
      }
      return connection.pushNotification(note, myDevice);
    };

    return ApplePushNotification;

  })();

  applePN = new ApplePushNotification;

  applePN.ApplePushNotification = ApplePushNotification;

  exports = module.exports = applePN;

}).call(this);
